{
  "openapi": "3.0.3",
  "info": {
    "title": "Task Manager API",
    "version": "1.0.0",
    "description": "API for managing tasks."
  },
  "servers": [
    { "url": "http://localhost:8000/api" }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "summary": "List all tasks",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by (e.g., id, title, status)",
            "schema": { "type": "string", "default": "id" }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sort direction (asc or desc)",
            "schema": { "type": "string", "enum": ["asc", "desc"], "default": "desc" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": { "$ref": "#/components/schemas/TaskStatus" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Task" }
                }
              }
            }
          },
          "422": { "$ref": "#/components/responses/ValidationError" }
        }
      },
      "post": {
        "summary": "Create a new task",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TaskCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully.",
            "headers": {
              "Location": {
                "description": "URL of the created task.",
                "schema": { "type": "string", "format": "uri" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Task" }
              }
            }
          },
          "422": { "$ref": "#/components/responses/ValidationError" }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "summary": "Get a single task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Task found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Task" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "put": {
        "summary": "Update a task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TaskUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Task" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" },
          "422": { "$ref": "#/components/responses/ValidationError" }
        }
      },
      "delete": {
        "summary": "Delete a task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully."
          },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "readOnly": true },
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "status": { "$ref": "#/components/schemas/TaskStatus" },
          "created_at": { "type": "string", "format": "date-time", "readOnly": true },
          "updated_at": { "type": "string", "format": "date-time", "readOnly": true }
        },
        "required": ["id", "title", "status", "created_at", "updated_at"]
      },
      "TaskCreate": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "status": { "$ref": "#/components/schemas/TaskStatus" }
        },
        "required": ["title"]
      },
      "TaskUpdate": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "status": { "$ref": "#/components/schemas/TaskStatus" }
        }
      },
      "TaskStatus": {
        "type": "string",
        "enum": ["pending", "in_progress", "done"]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Validation failed." },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Record not found." }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation failed.",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ValidationErrorResponse" }
          }
        }
      },
      "NotFound": {
        "description": "Record not found.",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
          }
        }
      }
    }
  }
} 